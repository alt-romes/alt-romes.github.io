<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Romes' Blog RSS Feed</title>
    <link href="http://alt-romes.github.io/atom.xml" rel="self" />
    <link href="http://alt-romes.github.io" />
    <id>http://alt-romes.github.io/atom.xml</id>
    <author>
        <name>Rodrigo Mesquita</name>
        
        <email>rodrigo.m.mesquita@gmail.com</email>
        
    </author>
    <updated>2023-11-30T00:00:00Z</updated>
    <entry>
    <title>Computed Properties for Haskell Records</title>
    <link href="http://alt-romes.github.io/posts/2023-11-30-computed-properties-for-haskell-records.html" />
    <id>http://alt-romes.github.io/posts/2023-11-30-computed-properties-for-haskell-records.html</id>
    <published>2023-11-30T00:00:00Z</published>
    <updated>2023-11-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[Adding computed properties to Haskell record types -- probably a new Haskell anti-pattern!]]></summary>
</entry>
<entry>
    <title>Creating a macOS app with Haskell and Swift</title>
    <link href="http://alt-romes.github.io/posts/2023-11-10-creating-a-macos-app-with-haskell-and-swift.html" />
    <id>http://alt-romes.github.io/posts/2023-11-10-creating-a-macos-app-with-haskell-and-swift.html</id>
    <published>2023-11-10T00:00:00Z</published>
    <updated>2023-11-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[First part of an in-depth guide into developing a native macOS application using Haskell with Swift and SwiftUI. This part covers the set-up required to call Haskell functions from Swift in an XCode project using SwiftUI.]]></summary>
</entry>
<entry>
    <title>Writing prettier Haskell with Unicode Syntax and Vim</title>
    <link href="http://alt-romes.github.io/posts/2023-06-21-haskell-unicode-syntax-vim.html" />
    <id>http://alt-romes.github.io/posts/2023-06-21-haskell-unicode-syntax-vim.html</id>
    <published>2023-06-21T00:00:00Z</published>
    <updated>2023-06-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[A short write-up on combining <em>digraphs</em>, a feature built-in to vim, and Haskell's <code>UnicodeSyntax</code> extension, to easily write beautiful Haskell programs with unicode symbols.]]></summary>
</entry>
<entry>
    <title>Monthly Update on a Haskell Game Engine</title>
    <link href="http://alt-romes.github.io/posts/2023-01-01-monthly-update-on-a-haskell-game-engine.html" />
    <id>http://alt-romes.github.io/posts/2023-01-01-monthly-update-on-a-haskell-game-engine.html</id>
    <published>2023-01-01T00:00:00Z</published>
    <updated>2023-01-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[I've been working the past month or two in a shader-centric, type-heavy 3d-renderer/game engine, written in Haskell. In this post I present some of the current implementation details and pictures of the multiple achievements and progress done so far.]]></summary>
</entry>
<entry>
    <title>Graphical Applications in Haskell with FRP and Reflex</title>
    <link href="http://alt-romes.github.io/posts/lectures/2022-07-10-frp.html" />
    <id>http://alt-romes.github.io/posts/lectures/2022-07-10-frp.html</id>
    <published>2022-07-10T00:00:00Z</published>
    <updated>2022-07-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[This is the second of two parts on creating interactive graphical applications with functional programming, in Haskell; this second part, using <strong>Functional Reactive Programming</strong> through <code>reflex</code>, and how it can be used to build a DOM-based interactive UI.]]></summary>
</entry>
<entry>
    <title>Graphical Applications in Haskell with MVC and Gloss</title>
    <link href="http://alt-romes.github.io/posts/lectures/2022-06-27-mvc-gloss.html" />
    <id>http://alt-romes.github.io/posts/lectures/2022-06-27-mvc-gloss.html</id>
    <published>2022-06-27T00:00:00Z</published>
    <updated>2022-06-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[This is the first of two parts on creating interactive graphical applications with functional programming, in Haskell; this first part, using the <strong>Model-View-Controller</strong> pattern in its functional flavour through <code>gloss</code>. The <strong>MVC</strong> pattern is common accross all languages and goes by many names. For example, it's how smartphone applications are structured in Android Studio.]]></summary>
</entry>
<entry>
    <title>Haskell 102 Lecture Notes</title>
    <link href="http://alt-romes.github.io/posts/lectures/2022-05-08-lecture-2.html" />
    <id>http://alt-romes.github.io/posts/lectures/2022-05-08-lecture-2.html</id>
    <published>2022-05-08T00:00:00Z</published>
    <updated>2022-05-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[Lecture notes from an introductory class on Haskell]]></summary>
</entry>
<entry>
    <title>Haskell 101 Lecture Notes</title>
    <link href="http://alt-romes.github.io/posts/lectures/2022-05-04-lecture.html" />
    <id>http://alt-romes.github.io/posts/lectures/2022-05-04-lecture.html</id>
    <published>2022-05-04T00:00:00Z</published>
    <updated>2022-05-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[Lecture notes from an introductory class on Haskell]]></summary>
</entry>

</feed>
